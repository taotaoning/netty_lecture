java.io
    java.io中最为核心的一个概念时流（stream），面向流编程。
    java中，一个流要么是输入流，要么是输出流，不可能同时既是输入流又是输出流。

java.nio
    java.nio中有三个核心的概念：Selector Channel Buffer
    在java.nio中，我们是面向块（block）或者缓冲区（buffer）编程的。
   Buffer
    Buffer本身就是一块内存，底层实现上，它实际上就是个数组。数据的读、写都是通过Buffer来实现的。
    除了数组之外，Buffer还提供了对于数据的结构化访问方式，并且可以追踪到系统的读写过程。
    java中的7种原生数据类型都有各自对应的Buffer类型，eg：IntBuffer。。。。。 没有Boolean类型的Buffer
   Channel
    Channel指的是可以向其写入数据或者是从中读取数据的对象，它类似于java.io中的stream
    所有的数据的读写都是通过Buffer来进行的，永远不会出现直接向Channel中读写数据的情况。
    与stream不同的是Channel是双向的，一个流可能是inputstream/outputstream ，Channel打开后则可以进行读取，写入或者读写。
    由于Channel是双向的，因此它能更好的反映出底层操作系统的真实情况：eg：在Linux系统中，底层操作系统的通道就是双向的。

关于NIO Buffer中的3个重要状态属性含义：position limit capacity
    0<= mark <= position <= limit <= capacity