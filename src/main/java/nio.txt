java.io
    java.io中最为核心的一个概念时流（stream），面向流编程。
    java中，一个流要么是输入流，要么是输出流，不可能同时既是输入流又是输出流。

java.nio
    java.nio中有三个核心的概念：Selector Channel Buffer
    在java.nio中，我们是面向块（block）或者缓冲区（buffer）编程的。
   Buffer
   buffer有的方法不会改变position值和limit值  有的方法会改变这两个值
    Buffer本身就是一块内存，底层实现上，它实际上就是个数组。数据的读、写都是通过Buffer来实现的。
    除了数组之外，Buffer还提供了对于数据的结构化访问方式，并且可以追踪到系统的读写过程。
    java中的7种原生数据类型都有各自对应的Buffer类型，eg：IntBuffer。。。。。 没有Boolean类型的Buffer
   Channel
    Channel指的是可以向其写入数据或者是从中读取数据的对象，它类似于java.io中的stream
    所有的数据的读写都是通过Buffer来进行的，永远不会出现直接向Channel中读写数据的情况。
    与stream不同的是Channel是双向的，一个流可能是inputstream/outputstream ，Channel打开后则可以进行读取，写入或者读写。
    由于Channel是双向的，因此它能更好的反映出底层操作系统的真实情况：eg：在Linux系统中，底层操作系统的通道就是双向的。

关于NIO Buffer中的3个重要状态属性含义：position limit capacity
    0<= mark <= position <= limit <= capacity

 通过nio读取文件涉及三个步骤
    1.从fileinputstream中获取filechannel对象
    2.创建buffer对象
    3.将数据从channel读取到buffer
    注意：当 position = limit时，channel.read(buffer) 返回的时0. （为什么调用clear方法？）

    重要：
        服务端绑定的端口号 （eg:8899）仅仅用来接收客户端连接
        连接建立后的socket会选择一个空闲的端口号和客户端数据传输



字符集编解码：
    1. ASCII ：美国信息交换标准代码
        7（位） bit表示一个字符，共可以表示2的7次方个（128）字符。

    2. ISO-8859-1 :
        8（位） bit表示一个字符，即用一个字节（byte）表示一个字符，共可以表示256个字符

    3. GB2312
        两个字节表示一个汉字
    4. GBK
        兼容GB2312

    5. Unicode
        两个字节表示一个字符：问题存储空间比较大，对于英文这种字符来说，空间浪费

    6.UTF 变长字节表示方式  （eg：如果是英文字节，则采用ascii方式表示，也就是说utf兼容以上全部）
        Unicode是一种编码方式，而UTF是一种存储方式：UTF-8是Unicode的实现方式之一
        一般来说UTF-8 会采用3个字节表示一个汉字

    关于文件编解码乱码：

      不会乱码：
        a.txt ----> 存储方式为utf-8
        |   --> 经过流
        iso-8859-1 解码
        |   --> 经过流
        iso-8859-1 编码
        |
        b.txt ----> 存储方式utf-8

        会乱码：
          a.txt ----> 存储方式为utf-8
          |   --> 经过流
          iso-8859-1 解码
          |   --> 经过流
          utf-8 编码
          |
          b.txt ----> 存储方式utf-8

        会乱码：
         a.txt ----> 存储方式为utf-8
         |   --> 经过流
         iso-8859-1 解码
         |   --> 经过流
         iso-8859-1 b编码
         |
         b.txt ----> 存储方式gbk